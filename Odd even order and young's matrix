//1.调整数组使奇数全部都位于偶数前面。
//
//题目：
//输入一个整数数组，实现一个函数，
//来调整该数组中数字的顺序使得数组中所有的奇数位于数组的前半部分，
//所有偶数位于数组的后半部分。

1.
//#include<stdio.h>
//#include<string.h>
//
//void Adjust_array(int str[10],int len)
//{
//	int i = 0;
//	int j = 0;
//	int left = 0;
//	int right = len-1;
//	int p[20] = {0};
//	for (j = 0; j < len; j++)
//	{
//		p[j] = str[j];
//	}
//	while (left <= right)
//	{
//		if (p[i] % 2 == 1)
//		{
//			str[left] = p[i];
//			i++;
//			left++;
//		}
//		else
//		{
//			str[right] = p[i];
//			i++;
//			right--;
//		}
//	}
//	for (i = 0; i < len; i++)
//	{
//		printf("%d ",str[i]);
//	}
//}
//int main()
//{
//	int str[9] = {1,2,3,4,5,6,7,8,9};
//	int len = sizeof(str) / sizeof(str[0]) ;
//	Adjust_array(str,len);
//	system("pause");
//	return 0;
//}

2.
//#include<stdio.h>
//
//void show(int *arr, int len)
//{
//	int i;
//	for (i = 0; i < len; i++)
//	{
//		printf("%d ", arr[i]);
//	}
//}
//void Swap_arr(int *arr, int len)
//{
//	int left = 0;
//	int right = len - 1;
//	while (left < right)
//	{
//		while (left < right&&arr[left] % 2 == 1)
//		{
//			left++;
//		}
//		while (left < right&&arr[right] % 2 == 0)
//		{
//			right--;
//		}
//		if (left < right)
//		{
//			int temp;
//			temp = arr[left];
//			arr[left] = arr[right];
//			arr[right] = temp;
//		}
//	}
//	
//}
//int main()
//{
//	int arr[] = {1,2,3,4,5,6,7,8,9};
//	int len = sizeof(arr) / sizeof(arr[0]);
//	Swap_arr(arr, len);
//	show(arr, len);
//	system("pause");
//	return 0;
//}

//2.
////杨氏矩阵 
//有一个二维数组.
//数组的每行从左到右是递增的，每列从上到下是递增的.
//在这样的数组中查找一个数字是否存在。
//时间复杂度小于O(N);
#include<stdio.h>

int find(int arr[][3], int *px, int *py,int key)
{
	int x = 0;
	int y = *py - 1;
	while ((x < *px) && (y >= 0))
	{
		if (arr[x][y] == key)
		{
			*px = x;
			*py = y;
			return 0;
		}
		else if (arr[x][y] < key)
		{
			x++;
		}
		else
		{
			x++;
			y--;
		}
	}
	*px = -1;
	*py = -1;
}
void print_Arrs(int *arr,int row, int col)
{
	int i = 0;
	int j = 0;
	for (i = 0; i < row; i++)
	{
		for (j = 0; j < col; j++)
		{
			printf("%d ", arr[i*col + j]);
		}
		printf("\n");
	}

}
int main()
{
	int n;
	int arr[3][3] = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	print_Arrs((int *)arr, 3, 3);
	int x = 3;
	int y = 3;
	printf("请输入需要查找的数字:\n");
	scanf("%d", &n);
	find(arr,&x,&y,n);
	if (x != -1 && y != -1)
	{
		printf("找到了，下标为%d,%d\n",x,y);
	}
	else
	{
		printf("没找到！\n");
	}
	system("pause");
	return 0;
}




